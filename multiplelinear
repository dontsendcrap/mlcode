

import numpy as np

import pandas as pd

import matplotlib.pyplot as plt

from sklearn.linear_model import LinearRegression

from sklearn.model_selection import train_test_split

from sklearn.metrics import r2_score

 

# Get number of records from user

n = int(input("Enter number of houses you want to input: "))

 

# Create empty lists

areas = []

bedrooms = []

ages = []

prices = []

 

# Take input dynamically

for i in range(n):

   print(f"\nEnter details for house {i+1}:")

   area = float(input("Area (in sq ft): "))

   bedroom = int(input("Number of bedrooms: "))

   age = int(input("Age of the house (in years): "))

   price = float(input("Price of the house: "))

   

   areas.append(area)

   bedrooms.append(bedroom)

   ages.append(age)

   prices.append(price)

 

# Create DataFrame

data = {

   'area': areas,

   'bedrooms': bedrooms,

   'age': ages,

   'price': prices

}

df = pd.DataFrame(data)

 

# Features and target

X = df[['area', 'bedrooms', 'age']]

y = df['price']

 

# Train-test split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

 

# Model training

model = LinearRegression()

model.fit(X_train, y_train)

 

# Predictions

y_pred = model.predict(X_test)

r2 = r2_score(y_test, y_pred)

 

# Print results

print("\nActual prices:", y_test.values)

print("Predicted prices:", y_pred)

print("R² Score:", r2)

 

# Simple Plot: Actual vs Predicted

plt.figure(figsize=(7, 5))

plt.scatter(y_test, y_pred, color='blue')

plt.plot([y.min(), y.max()], [y.min(), y.max()], color='red', linestyle='--')  # Ideal line

 

plt.xlabel('Actual Prices')

plt.ylabel('Predicted Prices')

plt.title(f'Actual vs Predicted Prices\nR² Score = {r2:.2f}')

plt.grid(True)

plt.tight_layout()

plt.show()
