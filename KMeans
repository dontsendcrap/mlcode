from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import numpy as np


n_samples = int(input("Enter number of data points: "))
n_features = int(input("Enter number of features: "))
k = int(input("Enter number of clusters: "))


print(f"Enter {n_features} features for each of the {n_samples} data points:")
data = []
for i in range(n_samples):
    point = list(map(float, input(f"Data point {i+1}: ").split()))
    if len(point) != n_features:

        print(f" Expected {n_features} values, got {len(point)}. Exiting.")
        exit()
    data.append(point)

X = np.array(data)

# Step 3: Apply K-Means
kmeans = KMeans(n_clusters=k, random_state=42)
labels = kmeans.fit_predict(X)

# Step 4: Output results
print("\nCluster labels:", labels)
print("Cluster centroids:\n", kmeans.cluster_centers_)

# Step 5: Simple 2D Plot (only first 2 features)
if n_features >= 2:
    plt.scatter(X[:, 0], X[:, 1], c=labels, cmap='viridis')
    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1],
                c='red', marker='X', s=100, label='Centroids')
    plt.xlabel("Feature 1")
    plt.ylabel("Feature 2")
    plt.title("K-Means Clustering (2D View)")
    plt.legend()
    plt.show()
else:
    print(" Not enough features to plot a 2D scatter plot.")
